// Generated by gencpp from file probot_demo/Img_processResponse.msg
// DO NOT EDIT!


#ifndef PROBOT_DEMO_MESSAGE_IMG_PROCESSRESPONSE_H
#define PROBOT_DEMO_MESSAGE_IMG_PROCESSRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <probot_demo/Process_Result.h>

namespace probot_demo
{
template <class ContainerAllocator>
struct Img_processResponse_
{
  typedef Img_processResponse_<ContainerAllocator> Type;

  Img_processResponse_()
    : result()
    , objects()  {
    }
  Img_processResponse_(const ContainerAllocator& _alloc)
    : result(_alloc)
    , objects(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _result_type;
  _result_type result;

   typedef std::vector< ::probot_demo::Process_Result_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::probot_demo::Process_Result_<ContainerAllocator> >::other >  _objects_type;
  _objects_type objects;





  typedef boost::shared_ptr< ::probot_demo::Img_processResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::probot_demo::Img_processResponse_<ContainerAllocator> const> ConstPtr;

}; // struct Img_processResponse_

typedef ::probot_demo::Img_processResponse_<std::allocator<void> > Img_processResponse;

typedef boost::shared_ptr< ::probot_demo::Img_processResponse > Img_processResponsePtr;
typedef boost::shared_ptr< ::probot_demo::Img_processResponse const> Img_processResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::probot_demo::Img_processResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::probot_demo::Img_processResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace probot_demo

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'probot_demo': ['/home/li/ROS/probot_ws/src/PROBOT_Anno/probot_demo/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::probot_demo::Img_processResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::probot_demo::Img_processResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::probot_demo::Img_processResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::probot_demo::Img_processResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::probot_demo::Img_processResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::probot_demo::Img_processResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::probot_demo::Img_processResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8324aae6834001fb43294e05233c1c76";
  }

  static const char* value(const ::probot_demo::Img_processResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8324aae6834001fbULL;
  static const uint64_t static_value2 = 0x43294e05233c1c76ULL;
};

template<class ContainerAllocator>
struct DataType< ::probot_demo::Img_processResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "probot_demo/Img_processResponse";
  }

  static const char* value(const ::probot_demo::Img_processResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::probot_demo::Img_processResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string result\n\
Process_Result[] objects\n\
\n\
\n\
\n\
================================================================================\n\
MSG: probot_demo/Process_Result\n\
string color\n\
string type\n\
Pt2D[4] region\n\
float32[2] center\n\
float32 theta\n\
\n\
================================================================================\n\
MSG: probot_demo/Pt2D\n\
int32 x\n\
int32 y\n\
";
  }

  static const char* value(const ::probot_demo::Img_processResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::probot_demo::Img_processResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.result);
      stream.next(m.objects);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Img_processResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::probot_demo::Img_processResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::probot_demo::Img_processResponse_<ContainerAllocator>& v)
  {
    s << indent << "result: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.result);
    s << indent << "objects[]" << std::endl;
    for (size_t i = 0; i < v.objects.size(); ++i)
    {
      s << indent << "  objects[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::probot_demo::Process_Result_<ContainerAllocator> >::stream(s, indent + "    ", v.objects[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PROBOT_DEMO_MESSAGE_IMG_PROCESSRESPONSE_H
