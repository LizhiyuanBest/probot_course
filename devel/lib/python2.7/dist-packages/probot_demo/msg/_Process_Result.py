# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from probot_demo/Process_Result.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import probot_demo.msg

class Process_Result(genpy.Message):
  _md5sum = "7a9940e9234e2c5b8c9ee3af165e3aef"
  _type = "probot_demo/Process_Result"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string color
string type
Pt2D[4] region
float32[2] center
float32 theta

================================================================================
MSG: probot_demo/Pt2D
int32 x
int32 y
"""
  __slots__ = ['color','type','region','center','theta']
  _slot_types = ['string','string','probot_demo/Pt2D[4]','float32[2]','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       color,type,region,center,theta

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Process_Result, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.color is None:
        self.color = ''
      if self.type is None:
        self.type = ''
      if self.region is None:
        self.region = [probot_demo.msg.Pt2D() for _ in range(4)]
      if self.center is None:
        self.center = [0.] * 2
      if self.theta is None:
        self.theta = 0.
    else:
      self.color = ''
      self.type = ''
      self.region = [probot_demo.msg.Pt2D() for _ in range(4)]
      self.center = [0.] * 2
      self.theta = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.color
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      for val1 in self.region:
        _x = val1
        buff.write(_get_struct_2i().pack(_x.x, _x.y))
      buff.write(_get_struct_2f().pack(*self.center))
      buff.write(_get_struct_f().pack(self.theta))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.region is None:
        self.region = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.color = str[start:end].decode('utf-8')
      else:
        self.color = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.type = str[start:end].decode('utf-8')
      else:
        self.type = str[start:end]
      self.region = []
      for i in range(0, 4):
        val1 = probot_demo.msg.Pt2D()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2i().unpack(str[start:end])
        self.region.append(val1)
      start = end
      end += 8
      self.center = _get_struct_2f().unpack(str[start:end])
      start = end
      end += 4
      (self.theta,) = _get_struct_f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.color
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      for val1 in self.region:
        _x = val1
        buff.write(_get_struct_2i().pack(_x.x, _x.y))
      buff.write(self.center.tostring())
      buff.write(_get_struct_f().pack(self.theta))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.region is None:
        self.region = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.color = str[start:end].decode('utf-8')
      else:
        self.color = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.type = str[start:end].decode('utf-8')
      else:
        self.type = str[start:end]
      self.region = []
      for i in range(0, 4):
        val1 = probot_demo.msg.Pt2D()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2i().unpack(str[start:end])
        self.region.append(val1)
      start = end
      end += 8
      self.center = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=2)
      start = end
      end += 4
      (self.theta,) = _get_struct_f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
